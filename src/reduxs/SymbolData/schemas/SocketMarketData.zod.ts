// Generated by ts-to-zod
import { z } from 'zod';

const symbolTypeSchema = z.union([
  z.literal('STOCK'),
  z.literal('FUND'),
  z.literal('ETF'),
  z.literal('FUTURES'),
  z.literal('CW'),
  z.literal('BOND'),
  z.literal('INDEX'),
]);

const symbolSessionSchema = z.union([z.literal('ATO'), z.literal('ATC'), z.literal('CONTINUOUS')]);

const socketMarketDataBaseSchema = z.object({
  symbolCode: z.string(),
  symbolType: symbolTypeSchema,
  time: z.string().optional(),
  session: symbolSessionSchema.optional(),
});

const quoteResponseBaseSchema = socketMarketDataBaseSchema.extend({
  openPrice: z.number().optional(),
  highPrice: z.number().optional(),
  lowPrice: z.number().optional(),
  currentPrice: z.number(),
  changePrice: z.number(),
  changeRate: z.number(),
  tradingVolume: z.number(),
  tradingValue: z.number(),
  matchingVolume: z.number(),
});

const foreignDataSchema = z.object({
  buyVolume: z.number().optional(),
  sellVolume: z.number().optional(),
  currentRoom: z.number().optional(),
  totalRoom: z.number().optional(),
});

const futuresQuoteSchema = quoteResponseBaseSchema.extend({
  averagePrice: z.number(),
  foreignData: foreignDataSchema,
  matchedBy: z.string(),
});

const cWQuoteSchema = quoteResponseBaseSchema.extend({
  averagePrice: z.number(),
  foreignData: foreignDataSchema,
  breakEven: z.number().optional(),
  matchedBy: z.string(),
});

const indexQuoteSchema = quoteResponseBaseSchema.extend({
  indexChange: z
    .object({
      ceilingCount: z.number(),
      floorCount: z.number(),
      upCount: z.number(),
      downCount: z.number(),
      unChangeCount: z.number(),
    })
    .optional(),
});

const bidOfferSchema = z.object({
  price: z.number(),
  volume: z.number(),
  change: z.number().optional(),
});

export const bidOfferDataSchema = socketMarketDataBaseSchema.extend({
  expectedPrice: z.number().optional(),
  expectedChange: z.number().optional(),
  expectedRate: z.number().optional(),
  bestBid: z.array(bidOfferSchema),
  bestOffer: z.array(bidOfferSchema),
});

export const stockQuoteSchema = quoteResponseBaseSchema.extend({
  averagePrice: z.number(),
  foreignData: foreignDataSchema,
  matchedBy: z.string(),
});

export const quoteDataSchema = z.union([stockQuoteSchema, indexQuoteSchema, futuresQuoteSchema, cWQuoteSchema]);

export const statisticDataSchema = socketMarketDataBaseSchema.extend({
  date: z.string().optional(),
  tradingVolume: z.number(),
  totalBuyVolume: z.number(),
  totalBuyRatio: z.number(),
  totalSellVolume: z.number().optional(),
  totalSellRatio: z.number().optional(),
  totalUnknownVolume: z.number().optional(),
  totalUnknownRatio: z.number().optional(),
  priceStep: z.array(
    z.object({
      price: z.number(),
      accumulatedVolume: z.number(),
      accumulatedRatio: z.number(),
      accumulatedBuy: z.number().optional(),
      buyRatio: z.number().optional(),
      accumulatedSell: z.number().optional(),
      sellRatio: z.number().optional(),
      accumulatedUnknow: z.number().nullable().optional(),
      unknownRatio: z.number().nullable().optional(),
    })
  ),
});

export const socketMarketDataSchema = z.union([quoteDataSchema, bidOfferDataSchema, statisticDataSchema]);
